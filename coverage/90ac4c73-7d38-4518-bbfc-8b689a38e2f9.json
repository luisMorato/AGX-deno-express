{
  "scriptId": "854",
  "url": "file:///C:/Users/luisf/AppData/Local/deno/npm/registry.npmjs.org/mongoose/8.3.2/lib/schema/array.js",
  "functions": [
    {
      "functionName": "",
      "ranges": [
        {
          "startOffset": 0,
          "endOffset": 19443,
          "count": 1
        }
      ],
      "isBlockCoverage": true
    },
    {
      "functionName": "",
      "ranges": [
        {
          "startOffset": 1,
          "endOffset": 19442,
          "count": 1
        }
      ],
      "isBlockCoverage": true
    },
    {
      "functionName": "",
      "ranges": [
        {
          "startOffset": 214,
          "endOffset": 19436,
          "count": 1
        }
      ],
      "isBlockCoverage": true
    },
    {
      "functionName": "SchemaArray",
      "ranges": [
        {
          "startOffset": 1402,
          "endOffset": 3591,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "checkRequired",
      "ranges": [
        {
          "startOffset": 5951,
          "endOffset": 6417,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "SchemaArray.enum",
      "ranges": [
        {
          "startOffset": 6699,
          "endOffset": 7298,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "SchemaArray.applyGetters",
      "ranges": [
        {
          "startOffset": 7485,
          "endOffset": 7738,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "SchemaArray._applySetters",
      "ranges": [
        {
          "startOffset": 7779,
          "endOffset": 8631,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "SchemaArray.cast",
      "ranges": [
        {
          "startOffset": 8867,
          "endOffset": 11755,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "_castForPopulate",
      "ranges": [
        {
          "startOffset": 11818,
          "endOffset": 12870,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "SchemaArray.discriminator",
      "ranges": [
        {
          "startOffset": 12997,
          "endOffset": 13380,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "SchemaArray.clone",
      "ranges": [
        {
          "startOffset": 13432,
          "endOffset": 13774,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "SchemaArray._castForQuery",
      "ranges": [
        {
          "startOffset": 13815,
          "endOffset": 15818,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "SchemaArray.castForQuery",
      "ranges": [
        {
          "startOffset": 15971,
          "endOffset": 16315,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "cast$all",
      "ranges": [
        {
          "startOffset": 16318,
          "endOffset": 16823,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "cast$elemMatch",
      "ranges": [
        {
          "startOffset": 16825,
          "endOffset": 17964,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    },
    {
      "functionName": "createLogicalQueryOperatorHandler",
      "ranges": [
        {
          "startOffset": 18342,
          "endOffset": 18746,
          "count": 3
        }
      ],
      "isBlockCoverage": true
    },
    {
      "functionName": "logicalQueryOperatorHandler",
      "ranges": [
        {
          "startOffset": 18400,
          "endOffset": 18743,
          "count": 0
        }
      ],
      "isBlockCoverage": false
    }
  ]
}